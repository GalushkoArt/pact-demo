buildscript {
    dependencies {
        classpath('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml') {
            version { strictly '2.15.3' }
        }
    }
}

/**
 * Gradle build file for the price-service-consumer module.
 * This module implements a client for the price service and includes Pact consumer contract tests (client test).
 * <p>
 * Файл сборки Gradle для модуля price-service-consumer.
 * Этот модуль реализует клиент для сервиса цен и включает контрактные тесты потребителя Pact (тесты клиента).
 */
plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    // Pact plugin for consumer contract testing
    // Плагин Pact для контрактного тестирования потребителя
    id 'au.com.dius.pact' version '4.6.17'
    // OpenAPI generator for client code generation
    // Генератор OpenAPI для генерации клиентского кода
    id 'org.openapi.generator' version '7.13.0'
    // gRPC plugin for proto compilation
    id 'com.google.protobuf' version '0.9.4'
}

version = "0.1.0.1"

/**
 * OpenAPI code generation configuration.
 * Generates client code based on the OpenAPI specification.
 * <p>
 * Конфигурация генерации кода OpenAPI.
 * Генерирует клиентский код на основе спецификации OpenAPI.
 *
 * @see <a href=https://openapi-generator.tech/docs/generators/java/>java client generator</a>
 */
openApiGenerate {
    generatorName = "java"
    inputSpec = "$rootDir/oas/openapi.yaml"
    ignoreFileOverride = "$rootDir/.openapi-generator-java-sources.ignore"
    outputDir = "$buildDir/generated"
    apiPackage = "org.openapi.example.api"
    apiPackage = "com.example.priceservice.client.api"
    modelPackage = "com.example.priceservice.client.api.model"
    configOptions = [
            dateLibrary     : "java8",
            library         : "restclient",
            openApiNullable : "false",
            generateBuilders: "true",
    ]
}

// Add generated sources to the source set
// Добавление сгенерированных исходников в набор исходных кодов
sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/src/main/java"
            srcDir "$buildDir/generated/source/proto/main/grpc"
            srcDir "$buildDir/generated/source/proto/main/java"
        }
        proto {
            srcDir "$rootDir/proto"
        }
    }
}

// Dependency to make sure the OpenAPI code is generated before compiling
// Зависимость чтобы код OpenAPI был сгенерирован перед компиляцией
compileJava.dependsOn('openApiGenerate')

// Ensure generated sources are available during compilation
// Обеспечение доступности сгенерированных исходников во время компиляции
tasks.named('compileJava') {
    options.compilerArgs << '-Xlint:unchecked'
    doFirst {
        // Make sure the directory exists
        // Создание директории при её отсутствии до компиляции
        file("$buildDir/generated/src/main/java").mkdirs()
    }
}

/**
 * Project dependencies.
 * Includes Spring Boot, Lombok, OpenAPI, and Pact for consumer testing (client tests).
 * <p>
 * Зависимости проекта.
 * Включает Spring Boot, Lombok, OpenAPI и Pact для тестирования потребителя (тесты клиента).
 */
dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // OpenAPI generated code dependencies
    // Зависимости для сгенерированного кода OpenAPI
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.15'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.0'

    // gRPC dependencies
    // Зависимости gRPC
    implementation 'net.devh:grpc-client-spring-boot-starter:3.1.0.RELEASE'
    implementation 'io.grpc:grpc-stub:1.66.0'
    implementation 'io.grpc:grpc-protobuf:1.66.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // Pact for consumer testing
    // Pact для тестирования потребителя
    testImplementation 'au.com.dius.pact.consumer:junit5:4.6.17'
    testImplementation 'io.pact.plugin.driver:core:0.5.1'

    // Testing
    // Тестирование
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

/**
 * Pact configuration for publishing contracts to the Pact Broker.
 * This is essential for sharing contracts between consumers and providers.
 * <p>
 * Конфигурация Pact для публикации контрактов в Pact Broker.
 * Это необходимо для обмена контрактами между потребителями и поставщиками.
 */
pact {
    publish {
        pactBrokerUrl = 'http://localhost:9292'
        pactBrokerUsername = 'pact'
        pactBrokerPassword = 'pact'
        tags = ['dev', 'test']
        version = project.version
    }
}

/**
 * Protobuf configuration for gRPC code generation.
 * Generates Java classes from proto files.
 * <p>
 * Конфигурация Protobuf для генерации кода gRPC.
 * Генерирует Java классы из proto файлов.
 */
protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.25.1'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.66.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// Ensure proto compilation happens before Java compilation
// Обеспечение компиляции proto перед компиляцией Java
compileJava.dependsOn('generateProto')
