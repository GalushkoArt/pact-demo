buildscript {
    dependencies {
        classpath('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml') {
            version { strictly '2.15.3' }
        }
    }
}

plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'au.com.dius.pact' version '4.6.17'
    id 'org.openapi.generator' version '7.13.0'
}

version = "0.1.0"

// Configure OpenAPI Generator
openApiGenerate {
    generatorName = "spring"
    inputSpec = "$rootDir/oas/openapi.yaml"
    outputDir = "$buildDir/generated"
    apiPackage = "com.example.priceservice.adapter.api"
    modelPackage = "com.example.priceservice.adapter.api.model"
    configOptions = [
            dateLibrary         : "java8",
            interfaceOnly       : "true",
            skipDefaultInterface: "true",
            useSpringBoot3      : "true",
            useSpringfox        : "false",
            useSwaggerUI        : "false",
            useTags             : "true",
            delegatePattern     : "false",
            generateBuilders    : "true",
            openApiNullable     : "false",
    ]
    // Force regeneration to ensure delegate interfaces are created
    globalProperties = [
            modelDocs: "false",
            apis     : "",
            models   : ""
    ]
}

// Add generated sources to the source set
sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/src/main/java"
        }
    }
}

// Make sure the OpenAPI code is generated before compiling
compileJava.dependsOn('openApiGenerate')

// Ensure generated sources are available during compilation
tasks.named('compileJava') {
    options.compilerArgs << '-Xlint:unchecked'
    doFirst {
        // Make sure the directory exists
        file("$buildDir/generated/src/main/java").mkdirs()
    }
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Database
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // OpenAPI generated code dependencies
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.15'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // Pact for provider verification
    testImplementation 'au.com.dius.pact.provider:junit5spring:4.6.17'
    testImplementation 'au.com.dius.pact.provider:junit5:4.6.17'
    testImplementation 'au.com.dius.pact.provider:spring:4.6.17'

    testImplementation 'org.apache.commons:commons-lang3:3.17.0'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'com.h2database:h2'
}

pact {
    serviceProviders {
        'price-service-provider-orderbook' {
            port = 8080
            version
            // Get pacts from broker
            hasPactsFromPactBroker('http://localhost:9292', authentication: ['Basic', 'pact', 'pact'])
        }
        'price-service-provider-price' {
            port = 8080
            version
            // Get pacts from broker
            hasPactsFromPactBroker('http://localhost:9292', authentication: ['Basic', 'pact', 'pact'])
        }
    }
    broker {
        pactBrokerUrl = 'http://localhost:9292/'
        retryCountWhileUnknown = 3
        retryWhileUnknownInterval = 10 // 10 seconds between retries
    }
}

test {
    useJUnitPlatform()

    // These properties need to be set on the test JVM process
    //https://docs.pact.io/implementation_guides/jvm/provider/junit#using-java-system-properties

    // required variables for fetching dynamic pacts, & publishing verification results
    systemProperty("pact.provider.version", System.getenv("GIT_COMMIT") == null ? version : System.getenv("GIT_COMMIT"))
    systemProperty("pact.provider.branch", System.getenv("GIT_BRANCH") == null ? "" : System.getenv("GIT_BRANCH"))

    // only publish verification results from CI allowing developers to run tests locally and debug, without affecting broker results
    // only verification results from a known source (such at a commit in a VCS and a reproducible environment such as CI) should be published
    systemProperty("pact.verifier.publishResults", "true")

    // pending pacts
//    systemProperty("pactbroker.enablePending", true)

    // work in progress pacts
    systemProperty("pactbroker.includeWipPactsSince", java.time.LocalDate.now().minusMonths(6).format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd")))

}