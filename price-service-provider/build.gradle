import java.time.LocalDate
import java.time.format.DateTimeFormatter

buildscript {
    dependencies {
        classpath('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml') {
            version { strictly '2.15.3' }
        }
    }
}

/**
 * Gradle build file for the price-service-provider module.
 * This module implements the provider API and includes Pact provider verification tests.
 * <p>
 * Файл сборки Gradle для модуля price-service-provider.
 * Этот модуль реализует API поставщика и включает тесты проверки поставщика Pact.
 */
plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    // Pact plugin for provider verification
    // Плагин Pact для проверки поставщика
    id 'au.com.dius.pact' version '4.6.17'
    // OpenAPI generator for API interface generation
    // Генератор OpenAPI для генерации интерфейса API
    id 'org.openapi.generator' version '7.13.0'
    // gRPC plugin for proto compilation
    id 'com.google.protobuf' version '0.9.4'
}

version = "0.1.0"

/**
 * OpenAPI code generation configuration.
 * Generates Spring interfaces based on the OpenAPI specification.
 * <p>
 * Конфигурация генерации кода OpenAPI.
 * Генерирует интерфейсы Spring на основе спецификации OpenAPI.
 */
openApiGenerate {
    generatorName = "spring"
    inputSpec = "$rootDir/oas/openapi.yaml"
    outputDir = "$buildDir/generated"
    apiPackage = "com.example.priceservice.adapter.api"
    modelPackage = "com.example.priceservice.adapter.api.model"
    configOptions = [
            dateLibrary         : "java8",
            interfaceOnly       : "true",
            skipDefaultInterface: "true",
            useSpringBoot3      : "true",
            useSpringfox        : "false",
            useSwaggerUI        : "false",
            useTags             : "true",
            delegatePattern     : "false",
            generateBuilders    : "true",
            openApiNullable     : "false",
    ]
    // Force regeneration to ensure delegate interfaces are created
    // Принудительная регенерация для обеспечения создания интерфейсов делегатов
    globalProperties = [
            modelDocs: "false",
            apis     : "",
            models   : ""
    ]
}

// Add generated sources to the source set
// Добавление сгенерированных исходников в набор исходных кодов
sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/src/main/java"
            srcDir "$buildDir/generated/source/proto/main/grpc"
            srcDir "$buildDir/generated/source/proto/main/java"
        }
        proto {
            srcDir "$rootDir/proto"
        }
    }
}

// Dependency to make sure the OpenAPI code is generated before compiling
// Зависимость чтобы код OpenAPI был сгенерирован перед компиляцией
compileJava.dependsOn('openApiGenerate')

// Ensure generated sources are available during compilation
// Обеспечение доступности сгенерированных исходников во время компиляции
tasks.named('compileJava') {
    options.compilerArgs << '-Xlint:unchecked'
    doFirst {
        // Make sure the directory exists
        // Создание директории, если она не существует
        file("$buildDir/generated/src/main/java").mkdirs()
    }
}

/**
 * Project dependencies.
 * Includes Spring Boot, database, OpenAPI, and Pact for provider verification.
 * <p>
 * Зависимости проекта.
 * Включает Spring Boot, базу данных, OpenAPI и Pact для проверки поставщика.
 */
dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Database
    // База данных
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // OpenAPI generated code dependencies
    // Зависимости для сгенерированного кода OpenAPI
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.15'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // gRPC dependencies
    // Зависимости gRPC
    implementation 'net.devh:grpc-server-spring-boot-starter:3.1.0.RELEASE'
    implementation 'io.grpc:grpc-stub:1.66.0'
    implementation 'io.grpc:grpc-protobuf:1.66.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // Pact for provider verification
    // Pact для проверки поставщика
    testImplementation 'au.com.dius.pact.provider:junit5spring:4.6.17'
    testImplementation 'au.com.dius.pact.provider:junit5:4.6.17'
    testImplementation 'au.com.dius.pact.provider:spring:4.6.17'

    testImplementation 'org.apache.commons:commons-lang3:3.17.0'

    // Testing
    // Тестирование
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'com.h2database:h2'
}

/**
 * Pact configuration for provider verification.
 * Defines multiple service providers and broker connection settings.
 * <p>
 * Конфигурация Pact для проверки поставщика.
 * Определяет несколько поставщиков услуг и настройки подключения к брокеру.
 */
pact {
    serviceProviders {
        'price-service-provider-orderbook' {
            port = 8080
            version
            // Get pacts from broker
            // Получение контрактов из брокера
            hasPactsFromPactBroker('http://localhost:9292', authentication: ['Basic', 'pact', 'pact'])
        }
        'price-service-provider-price' {
            port = 8080
            version
            // Get pacts from broker
            // Получение контрактов из брокера
            hasPactsFromPactBroker('http://localhost:9292', authentication: ['Basic', 'pact', 'pact'])
        }
    }
    broker {
        pactBrokerUrl = 'http://localhost:9292/'
        retryCountWhileUnknown = 3
        retryWhileUnknownInterval = 10 // 10 seconds between retries
    }
}

/**
 * Test configuration with Pact-specific system properties.
 * These properties control how Pact verification is performed and reported.
 * <p>
 * Конфигурация тестов со специфичными для Pact системными свойствами.
 * Эти свойства управляют тем, как выполняется и отображается проверка Pact.
 */
test {
    useJUnitPlatform()

    // These properties need to be set on the test JVM process
    // Эти свойства должны быть установлены в процессе тестовой JVM
    //https://docs.pact.io/implementation_guides/jvm/provider/junit#using-java-system-properties

    // Required variables for fetching dynamic pacts & publishing verification results
    // Обязательные переменные для получения динамических контрактов и публикации результатов проверки
    systemProperty("pact.provider.version", System.getenv("GIT_COMMIT") == null ? version : System.getenv("GIT_COMMIT"))
    systemProperty("pact.provider.branch", System.getenv("GIT_BRANCH") == null ? "" : System.getenv("GIT_BRANCH"))

    // Only publish verification results from CI allowing developers to run tests locally and debug, without affecting broker results
    // Only verification results from a known source (such at a commit in a VCS and a reproducible environment such as CI) should be published
    // Публикация результатов проверки только из CI, что позволяет разработчикам запускать тесты локально и отлаживать, не влияя на результаты брокера
    // Только результаты проверки из известного источника (например, коммит в VCS и воспроизводимая среда, такая как CI) должны публиковаться
    systemProperty("pact.verifier.publishResults", "true")

    // Pending pacts
    // Ожидающие контракты
//    systemProperty("pactbroker.enablePending", true)

    // Work in progress pacts - include pacts created in the last 6 months
    // Контракты в процессе разработки - включать контракты, созданные за последние 6 месяцев
    systemProperty("pactbroker.includeWipPactsSince", LocalDate.now().minusMonths(6).format(DateTimeFormatter.ofPattern("yyyy-MM-dd")))
}

/**
 * Protobuf configuration for gRPC code generation.
 * Generates Java classes from proto files.
 * <p>
 * Конфигурация Protobuf для генерации кода gRPC.
 * Генерирует Java классы из proto файлов.
 */
protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.25.1'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.66.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// Ensure proto compilation happens before Java compilation
// Обеспечение компиляции proto перед компиляцией Java
compileJava.dependsOn('generateProto')
